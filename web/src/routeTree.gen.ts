/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VotingImport } from './routes/_voting'
import { Route as DashboardImport } from './routes/_dashboard'
import { Route as AuthImport } from './routes/_auth'
import { Route as DashboardIndexImport } from './routes/_dashboard/index'
import { Route as VotingVotingImport } from './routes/_voting/voting'
import { Route as DashboardParticipantsImport } from './routes/_dashboard/participants'
import { Route as DashboardEliminationsImport } from './routes/_dashboard/eliminations'
import { Route as AuthRegisterImport } from './routes/_auth/register'
import { Route as AuthLoginImport } from './routes/_auth/login'

// Create/Update Routes

const VotingRoute = VotingImport.update({
  id: '/_voting',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const VotingVotingRoute = VotingVotingImport.update({
  id: '/voting',
  path: '/voting',
  getParentRoute: () => VotingRoute,
} as any)

const DashboardParticipantsRoute = DashboardParticipantsImport.update({
  id: '/participants',
  path: '/participants',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardEliminationsRoute = DashboardEliminationsImport.update({
  id: '/eliminations',
  path: '/eliminations',
  getParentRoute: () => DashboardRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/_voting': {
      id: '/_voting'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof VotingImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof AuthImport
    }
    '/_dashboard/eliminations': {
      id: '/_dashboard/eliminations'
      path: '/eliminations'
      fullPath: '/eliminations'
      preLoaderRoute: typeof DashboardEliminationsImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/participants': {
      id: '/_dashboard/participants'
      path: '/participants'
      fullPath: '/participants'
      preLoaderRoute: typeof DashboardParticipantsImport
      parentRoute: typeof DashboardImport
    }
    '/_voting/voting': {
      id: '/_voting/voting'
      path: '/voting'
      fullPath: '/voting'
      preLoaderRoute: typeof VotingVotingImport
      parentRoute: typeof VotingImport
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface DashboardRouteChildren {
  DashboardEliminationsRoute: typeof DashboardEliminationsRoute
  DashboardParticipantsRoute: typeof DashboardParticipantsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardEliminationsRoute: DashboardEliminationsRoute,
  DashboardParticipantsRoute: DashboardParticipantsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface VotingRouteChildren {
  VotingVotingRoute: typeof VotingVotingRoute
}

const VotingRouteChildren: VotingRouteChildren = {
  VotingVotingRoute: VotingVotingRoute,
}

const VotingRouteWithChildren =
  VotingRoute._addFileChildren(VotingRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof VotingRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/eliminations': typeof DashboardEliminationsRoute
  '/participants': typeof DashboardParticipantsRoute
  '/voting': typeof VotingVotingRoute
  '/': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  '': typeof VotingRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/eliminations': typeof DashboardEliminationsRoute
  '/participants': typeof DashboardParticipantsRoute
  '/voting': typeof VotingVotingRoute
  '/': typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_dashboard': typeof DashboardRouteWithChildren
  '/_voting': typeof VotingRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_dashboard/eliminations': typeof DashboardEliminationsRoute
  '/_dashboard/participants': typeof DashboardParticipantsRoute
  '/_voting/voting': typeof VotingVotingRoute
  '/_dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/register'
    | '/eliminations'
    | '/participants'
    | '/voting'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/login'
    | '/register'
    | '/eliminations'
    | '/participants'
    | '/voting'
    | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/_dashboard'
    | '/_voting'
    | '/_auth/login'
    | '/_auth/register'
    | '/_dashboard/eliminations'
    | '/_dashboard/participants'
    | '/_voting/voting'
    | '/_dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  DashboardRoute: typeof DashboardRouteWithChildren
  VotingRoute: typeof VotingRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  DashboardRoute: DashboardRouteWithChildren,
  VotingRoute: VotingRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_dashboard",
        "/_voting"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login",
        "/_auth/register"
      ]
    },
    "/_dashboard": {
      "filePath": "_dashboard.tsx",
      "children": [
        "/_dashboard/eliminations",
        "/_dashboard/participants",
        "/_dashboard/"
      ]
    },
    "/_voting": {
      "filePath": "_voting.tsx",
      "children": [
        "/_voting/voting"
      ]
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/register": {
      "filePath": "_auth/register.tsx",
      "parent": "/_auth"
    },
    "/_dashboard/eliminations": {
      "filePath": "_dashboard/eliminations.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/participants": {
      "filePath": "_dashboard/participants.tsx",
      "parent": "/_dashboard"
    },
    "/_voting/voting": {
      "filePath": "_voting/voting.tsx",
      "parent": "/_voting"
    },
    "/_dashboard/": {
      "filePath": "_dashboard/index.tsx",
      "parent": "/_dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
